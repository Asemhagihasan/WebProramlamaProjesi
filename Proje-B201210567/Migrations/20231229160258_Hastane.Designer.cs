// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Proje_B201210567.Data;

#nullable disable

namespace Proje_B201210567.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231229160258_Hastane")]
    partial class Hastane
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Proje_B201210567.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Adi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sifre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Soyad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TelefonNumarasi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Proje_B201210567.Models.CalismaSaati", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("BaslangicSaati")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("BitisSaati")
                        .HasColumnType("interval");

                    b.Property<List<TimeSpan>>("DayOfWeeks")
                        .HasColumnType("interval[]");

                    b.Property<int>("DoktorId")
                        .HasColumnType("integer");

                    b.Property<int>("Gun")
                        .HasColumnType("integer");

                    b.Property<List<bool>>("IsAvailable")
                        .HasColumnType("boolean[]");

                    b.Property<List<TimeSpan>>("RandevuSaatlari")
                        .HasColumnType("interval[]");

                    b.Property<string>("Tarih")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoktorId");

                    b.ToTable("CalismaSaati");
                });

            modelBuilder.Entity("Proje_B201210567.Models.CalismaVePoliklinik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DoktorId")
                        .HasColumnType("integer");

                    b.Property<string>("KullanciId")
                        .HasColumnType("text");

                    b.Property<int?>("calsismaId")
                        .HasColumnType("integer");

                    b.Property<int?>("poliklinikId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DoktorId");

                    b.HasIndex("KullanciId");

                    b.HasIndex("calsismaId");

                    b.HasIndex("poliklinikId");

                    b.ToTable("calismaVePolikliniks");
                });

            modelBuilder.Entity("Proje_B201210567.Models.Doktor", b =>
                {
                    b.Property<int>("DoktorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DoktorId"));

                    b.Property<string>("Cinsyet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Doktor_Adi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Doktor_Soyad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TelefonNumarasi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("poliklinikBolum_Id")
                        .HasColumnType("integer");

                    b.HasKey("DoktorId");

                    b.HasIndex("poliklinikBolum_Id");

                    b.ToTable("Doktorlar");
                });

            modelBuilder.Entity("Proje_B201210567.Models.Kullanci", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Cinsel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Kullanci_Adi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Kullanci_Soyad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Tc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TelefonNumarasi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Proje_B201210567.Models.Poliklinik", b =>
                {
                    b.Property<int>("Bolum_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Bolum_Id"));

                    b.Property<TimeSpan>("AcilisSaati")
                        .HasColumnType("interval");

                    b.Property<string>("Bolum_Adi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("DoktorId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("KapanisSaati")
                        .HasColumnType("interval");

                    b.HasKey("Bolum_Id");

                    b.ToTable("Poliklinikler");
                });

            modelBuilder.Entity("Proje_B201210567.Models.Randevu", b =>
                {
                    b.Property<int>("RandevuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RandevuId"));

                    b.Property<int?>("BolumId")
                        .HasColumnType("integer");

                    b.Property<int?>("DoktorId")
                        .HasColumnType("integer");

                    b.Property<string>("Durum")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KullaniciId")
                        .HasColumnType("text");

                    b.Property<string>("RandevuOlasanTarih")
                        .HasColumnType("text");

                    b.Property<string>("kullanciId")
                        .HasColumnType("text");

                    b.HasKey("RandevuId");

                    b.HasIndex("DoktorId");

                    b.HasIndex("kullanciId");

                    b.ToTable("Rendevuler");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Proje_B201210567.Models.Kullanci", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Proje_B201210567.Models.Kullanci", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proje_B201210567.Models.Kullanci", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Proje_B201210567.Models.Kullanci", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proje_B201210567.Models.CalismaSaati", b =>
                {
                    b.HasOne("Proje_B201210567.Models.Doktor", null)
                        .WithMany("CalismaSaatleri")
                        .HasForeignKey("DoktorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proje_B201210567.Models.CalismaVePoliklinik", b =>
                {
                    b.HasOne("Proje_B201210567.Models.Doktor", "Doktor")
                        .WithMany()
                        .HasForeignKey("DoktorId");

                    b.HasOne("Proje_B201210567.Models.Kullanci", "Kullanci")
                        .WithMany()
                        .HasForeignKey("KullanciId");

                    b.HasOne("Proje_B201210567.Models.CalismaSaati", "CalismaSaati")
                        .WithMany()
                        .HasForeignKey("calsismaId");

                    b.HasOne("Proje_B201210567.Models.Poliklinik", "Poliklinik")
                        .WithMany()
                        .HasForeignKey("poliklinikId");

                    b.Navigation("CalismaSaati");

                    b.Navigation("Doktor");

                    b.Navigation("Kullanci");

                    b.Navigation("Poliklinik");
                });

            modelBuilder.Entity("Proje_B201210567.Models.Doktor", b =>
                {
                    b.HasOne("Proje_B201210567.Models.Poliklinik", "poliklinik")
                        .WithMany("DoktorList")
                        .HasForeignKey("poliklinikBolum_Id");

                    b.Navigation("poliklinik");
                });

            modelBuilder.Entity("Proje_B201210567.Models.Randevu", b =>
                {
                    b.HasOne("Proje_B201210567.Models.Doktor", "doktor")
                        .WithMany()
                        .HasForeignKey("DoktorId");

                    b.HasOne("Proje_B201210567.Models.Kullanci", "kullanci")
                        .WithMany()
                        .HasForeignKey("kullanciId");

                    b.Navigation("doktor");

                    b.Navigation("kullanci");
                });

            modelBuilder.Entity("Proje_B201210567.Models.Doktor", b =>
                {
                    b.Navigation("CalismaSaatleri");
                });

            modelBuilder.Entity("Proje_B201210567.Models.Poliklinik", b =>
                {
                    b.Navigation("DoktorList");
                });
#pragma warning restore 612, 618
        }
    }
}
